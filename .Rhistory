plotqqb
list_all.genes <- list(expression,copynumber) # bind the two data frames in one list
names(list_all.genes) <- c("expression","copynumber") # rename the elements of the list
common_names = Reduce(intersect, lapply(list_all.genes, row.names)) # all common rownames in the three dataframes
list_all.genes <- lapply(list_all.genes, function(x) {x[row.names(x) %in% common_names,]}) # new list reduced to only the shared genes/ rownames
exp1b <- melt.data.frame(list_all.genes$expression, variable_name = "cell line") #fuse all expression values to one long column
cn1b <- melt.data.frame(list_all.genes$copynumber, variable_name = "cellline") # fuse all cell lines
plotexb <- ggplot() + geom_qq(aes(sample = exp1b$value), color= "navy blue") + ggtitle("Gene expression") # plot the quantils of the expression with the quantils of a gaussian distribution
plotcnb <- ggplot() + geom_qq(aes(sample = cn1b$value), color= "navy blue") + ggtitle("Copy number") # plot the quantils of the copynumber with the quantils of a gaussian distribution
grid.arrange(plotexb, plotcnb, ncol=2, top = "Checking normality")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
allDepMapData <- readRDS("~/GitHub/project-01-group-03/DepMap19Q1_allData.RDS")
copynumber = allDepMapData[["copynumber"]]
mutation = allDepMapData[["mutation"]]
kd.ceres = allDepMapData[["kd.ceres"]]
kd.prob = allDepMapData[["kd.prob"]]
annotation = allDepMapData[["annotation"]]
expression = allDepMapData[["expression"]]
annotation = annotation[which(annotation$Primary.Disease == "Ovarian Cancer"), ] # The annotation matrix now only consists of Ovarian Cancer cell lines
ID = annotation$DepMap_ID # DepMap_ID is the column name for the Ovarian Cancer cell lines
expression = expression[ , which(colnames(expression) %in% ID)] # Extract the ovarian cancer cell lines from expression, copynumber, kd.ceres, kd.prob and mutation
copynumber = copynumber [ , which(colnames(copynumber) %in% ID)]
kd.ceres = kd.ceres [ , which(colnames(kd.ceres) %in% ID)]
kd.prob = kd.prob [ , which(colnames(kd.prob) %in% ID)]
mutation = mutation [ ID]
copynumber <- copynumber[order(rownames(copynumber)),] # order the rownames alphabetically
expression <- expression[order(rownames(expression)),]
kd.ceres <- kd.ceres[order(rownames(kd.ceres)),]
kd.prob <- kd.prob[order(rownames(kd.prob)),]
rownames(annotation) = annotation$DepMap_ID # The column "DepMap_ID" contains the cell line' names
# removing unecessary columns
annotation = annotation[, -which(colnames(annotation) %in% c("DepMap_ID", "Aliases", "Primary.Disease", "Gender", "Source"))]
#removing the main data, because we already extracted the OC Data
rm(allDepMapData)
knitr::opts_chunk$set(echo = T, warning = F) # do not show output
NAV = apply(copynumber, 1, function(x) {sum(is.na(x))})
copynumber = copynumber[-which(NAV > 0), ]
install.packages("reshape", repos = "http://cran.us.r-project.org") # hier ein if else machen! Wenn package installiert, nur in der library
install.packages("ggplot2", repos = "http://cran.us.r-project.org") # laden, nicht nochmal herunterladen. Vllt hat David sowas in seinen
install.packages("data.table", repos = "http://cran.us.r-project.org") # Beispielen mal gemacht
install.packages("gridExtra", repos = "http://cran.us.r-project.org")
library(reshape)
library(ggplot2)
library(data.table)
library(gridExtra)
mutation.all = as.data.frame(rbindlist(mutation))
mutation.all = mutation.all[, which(colnames(mutation.all) %in% c("Hugo_Symbol", "DepMap_ID", "Variant_Classification", "Variant_annotation", "isTCGAhotspot", "Chromosome", "isDeleterious"))]
mutation.all = mutation.all[which(mutation.all$isDeleterious == "TRUE"), ] # only include rows (=genes) that have deleterious mutations in data frame "mutation.all"
mutation.all <- mutation.all[order(mutation.all$Hugo_Symbol),]
mutation.all$Hugo_Symbol = factor(mutation.all$Hugo_Symbol)
duplicates <- which(duplicated(mutation.all[c('Hugo_Symbol', 'DepMap_ID')]), ) #find all identical combinations of mutated gene and cell line
new_uniq <- mutation.all[!duplicated(mutation.all[c('Hugo_Symbol', 'DepMap_ID')]),] #do not include duplicates in data frame new_uniq
summary(new_uniq)
# Create a new data frame that contains the mutated genes (but just once per cell line, as definded in new_uniq)
DriverMutation <- as.data.frame(table(new_uniq$Hugo_Symbol))
#we extract all mutations that occur at least one time for a later step
dm_null = DriverMutation[which(DriverMutation$Freq > 0), ]
dm_null = dm_null[order(dm_null$Freq, decreasing = TRUE),]
rownames(dm_null) <- dm_null$Var1
# extract all mutations that occur more than 4 times among our cell lines in total
DriverMutation = DriverMutation[which(DriverMutation$Freq > 4), ]
DriverMutation$sub <- with(DriverMutation, reorder(DriverMutation$Var1, -DriverMutation$Freq, mean, na.rm = T))
ggplot(data = DriverMutation) +
geom_col(mapping = aes(x = DriverMutation$sub, y = DriverMutation$Freq, fill = DriverMutation$sub), show.legend = F) +
labs(x = "Mutated gene", y = "Frequency", title = "Driver mutations in Ovarian Cancer", subtitle = "(present in more than 4 cell lines)", caption = "(based on data from mutation matrix)") # create a barplot of the most frequent mutations, displaying their occurence
#creating a new matrix containing every cell line that has at least one of our 7 drivermutations. We check if the name of our Drivermutation occurs in the Drivermutation matrix
dm <- new_uniq[which(new_uniq$Hugo_Symbol %in% dm_null$Var1), ]
#function to find out if the Mutation occurs in the cell lines: "1" means yes and "0" means no
anno <- apply(dm_null, 1, function(x) {annotation[x]<- ifelse(rownames(annotation) %in% dm[which(dm$Hugo_Symbol %in% x), ]$DepMap_ID, 1, 0)})
#we have to transform the matrix to a data frame for further steps
anno <- as.data.frame(anno)
#we add the names of the cell lines to the matrix
rownames(anno) <- rownames(annotation)
#now we sum up how many TRUE occur in each cell line
anno$summe <- apply(anno, 1, function(x) { sum(x)})
#to get a better overview we use only the drivermutations that occur in more than 3 cell lines (the other two are needed in step 5)
dm_drei <- dm_null[which(dm_null$Freq > 3), ]
dm_zwei <- dm_null[which(dm_null$Freq > 2), ]
dm_eins <- dm_null[which(dm_null$Freq > 1), ]
#these two are extracted for step 5
anno_zwei <- anno[, which(colnames(anno) %in% rownames(dm_zwei))]
anno_zwei <- as.data.frame(anno_zwei)
anno_eins <- anno[, which(colnames(anno) %in% rownames(dm_eins))]
anno_eins <- as.data.frame(anno_eins)
anno <- anno[, which(colnames(anno) %in% rownames(dm_drei))]
#we have to bring the cell lines in a better order: so we put the cell lines with the most mutations together and decrease it upwards.
anno$summe <- apply(anno, 1, function(x) { sum(x)})
anno <- anno[order(anno$summe, decreasing = TRUE),]
#we remove columns which should not be plotted
anno <- anno[, -which(colnames(anno) == "summe")]
#and bring the matrix in a format the function "heatmap" can plot
anno <- data.matrix(anno)
#we create a color palette containing the colors we want to use
cols <- heat.colors(5)
mypalette <- colorRampPalette(cols)(2)
#we also add a second column to the matrix to include color associated Explanations for the legend
co <- as.data.frame(cols)
co$kat <- c("not mutated", "mutated (> 9 mutations)", "mutated (> 3 mutations)", "mutated (> 1 mutations)", "mutated (1 mutation)")
#plotting the heatmap
heatmap(anno, Rowv = NA, Colv = NA, main = "Occuring Drivermutations",xlab = "Mutated Gene", ylab = "cell line", col = heat.colors(5),  cexCol = 0.9, cexRow = 0.3)
#adding a legend
legend("topright", pch = 15, col = cols, legend = co$kat, bty = 'n', cex = 0.6)
dmARID1A = dm[which(dm$Hugo_Symbol == "ARID1A"), ]
nonARID1A <- kd.prob[, -which(colnames(kd.prob) %in% dmARID1A$DepMap_ID)] # prob Matrix with cell lines that do not have the ARID1A mutation
yesARID1A <- kd.prob[, which(colnames(kd.prob) %in% dmARID1A$DepMap_ID)] # prob matrix with cell lines that do have driver mutations
no <- nonARID1A[which(row.names(nonARID1A) == "BRD2"), ] # select BRD2 from submatrix comprising of cell lines without ARID1A mutations
apply(no, 1, mean) # calculate mean of BRD2 survival probability
yes <- yesARID1A[which(row.names(yesARID1A) == "BRD2"), ]
apply(yes, 1, mean)
rm(no, yes)
dmARID1A = dm[which(dm$Hugo_Symbol == "ARID1A"), ]
nonARID1A <- kd.prob[, -which(colnames(kd.prob) %in% dmARID1A$DepMap_ID)] # prob Matrix with cell lines that do not have the ARID1A mutation
yesARID1A <- kd.prob[, which(colnames(kd.prob) %in% dmARID1A$DepMap_ID)] # prob matrix with cell lines that do have driver mutation
# now calculate difference between gene essentiality
m.ARID1A <- as.data.frame(apply(yesARID1A, 1, mean))
m.nonARID1A <- as.data.frame(apply(nonARID1A, 1, mean))
diffARID1A <- m.ARID1A - m.nonARID1A # calculate difference in essentiality
diffARID1A$Difference <- diffARID1A$`apply(yesARID1A, 1, mean)` # wie mach ich das schlauer?
diffARID1A <- diffARID1A[which(diffARID1A$Difference > 0.3), ]
diffARID1A$sub <- with(diffARID1A, reorder(rownames(diffARID1A), -diffARID1A$Difference, mean, na.rm = T))
ggplot(data = diffARID1A) +
geom_col(mapping = aes(x = diffARID1A$sub, y = diffARID1A$Difference, fill = diffARID1A$sub), show.legend = F) +
labs(x = "SL partners", y = "Difference in essentiality", title = "SL partners for ARID1A Driver mutation", caption = "(based on data from kd.prob)")
# Muss dann nebeneinander am besten angezeigt werden. Dann diskussion!
dmTP53 = dm[which(dm$Hugo_Symbol == "TP53"), ]
nonTP53 <- kd.prob[, -which(colnames(kd.prob) %in% dmTP53$DepMap_ID)] # prob Matrix with cell lines that do not have the TP53 mutation
yesTP53 <- kd.prob[, which(colnames(kd.prob) %in% dmTP53$DepMap_ID)] # prob matrix with cell lines that do have driver mutation
m.TP53 <- as.data.frame(apply(yesTP53, 1, mean))
m.nonTP53 <- as.data.frame(apply(nonTP53, 1, mean))
diffTP53 <- m.TP53 - m.nonTP53 # calculate difference in essentiality
diffTP53$Difference <- diffTP53$`apply(yesTP53, 1, mean)`
diffTP53 <- diffTP53[which(diffTP53$Difference > 0.219), ]
# make a barplot for the genes whose knockout leads to biggest difference in survival probability
diffTP53$sub <- with(diffTP53, reorder(rownames(diffTP53), -diffTP53$Difference, mean, na.rm = T))
ggplot(data = diffTP53) +
geom_col(mapping = aes(x = diffTP53$sub, y = diffTP53$Difference, fill = diffTP53$sub), show.legend = F) +
labs(x = "SL partners", y = "Difference in essentiality", title = "SL partners for TP53 Driver mutation", caption = "(based on data from kd.prob)")
dmATM = dm[which(dm$Hugo_Symbol == "ATM"), ]
nonATM <- kd.prob[, -which(colnames(kd.prob) %in% dmATM$DepMap_ID)] # prob Matrix with cell lines that do not have the ATM mutation
yesATM <- kd.prob[, which(colnames(kd.prob) %in% dmATM$DepMap_ID)] # prob matrix with cell lines that do have driver mutation
m.ATM <- as.data.frame(apply(yesATM, 1, mean))
m.nonATM <- as.data.frame(apply(nonATM, 1, mean))
diffATM <- m.ATM - m.nonATM # calculate difference in essentiality
diffATM$Difference <- diffATM$`apply(yesATM, 1, mean)` # wie mach ich das schlauer?
diffATM <- diffATM[which(diffATM$Difference > 0.3), ]
# make a barplot for the genes whose knockout leads to biggest difference in survival probability
diffATM$sub <- with(diffATM, reorder(rownames(diffATM), -diffATM$Difference, mean, na.rm = T))
ggplot(data = diffATM) +
geom_col(mapping = aes(x = diffATM$sub, y = diffATM$Difference, fill = diffATM$sub), show.legend = F) +
labs(x = "SL partners", y = "Difference in essentiality", title = "SL partners for ATM Driver mutation", caption = "(based on data from kd.prob)")
#to investigate which cell lines contain which drivermutation we create a new data frame containing only the colums about our four Drivermutations
annodm <- as.data.frame(anno[, which(colnames(annotation) %in% c("nix"))])
#to seperate the cell lines in groups with similar Mutations we give every Drivermutation a specific value: If TP53 is True in the cell line it gets a "1000" , if it isnt ther will be a "0"
annodm$TP53 <- ifelse(rownames(annotation) %in% dm[which(dm$Hugo_Symbol %in% "TP53"), ]$DepMap_ID, 1000, 0)
#same here, ARID1A gets a "100" for True and a "0" for FALSE
annodm$ARID1A <- ifelse(rownames(annotation) %in% dm[which(dm$Hugo_Symbol %in% "ARID1A"), ]$DepMap_ID, 100, 0)
#and the same for the next Mutations
annodm$ATM <- ifelse(rownames(annotation) %in% dm[which(dm$Hugo_Symbol %in% "ATM"), ]$DepMap_ID, 10, 0)
annodm$PTPRF <- ifelse(rownames(annotation) %in% dm[which(dm$Hugo_Symbol %in% "PTPRF"), ]$DepMap_ID, 1, 0)
#we can now sum up these values in a new column
annodm$summe <- apply(annodm, 1, function(x) { sum(x)})
#we picked the most common combinations and gave them different categories by their sums
annodm$kat <- ifelse(annodm$summe == 1000, "TP53 only", ifelse(annodm$summe > 1099, "TP53 & ARID1A", ifelse(annodm$summe == 100, "ARID1A only", ifelse(annodm$summe == 110, "ARID1A & sec. Mu", ifelse(annodm$summe == 101, "ARID1A & sec. Mu", ifelse(annodm$summe < 100, "no TP53 & no ARID1A", ifelse(annodm$summe == 0, "no TP53 & no ARID1A", "TP53 & sec. Mu")))))))
# calculate variance over all rows (genes)
topVar = apply(kd.prob, 1, var)
# new data frame with just the genes whose knockout leads to highly variant cell death events -> perhaps our synthetic lethality interaction partners?
kd.prob.topVar = kd.prob[topVar > quantile(topVar, probs = 0.75), ]
#we have to transpose the data frame
kd.prob.top <- t(kd.prob.topVar)
#we use the colors defined in step 4 for our co existing mutations
mutation <- annodm$kat
#this function calculates the PCA with the variance calculated before
data<-kd.prob.top
df<-kd.prob.top
PC<-prcomp(df)
PCi<-data.frame(PC$x)
#we plot the pca with the different colors for cell lines with similar Driver Mutations
ggplot(PCi,aes(x=PC1,y=PC2,col=mutation))+geom_point(size=2.5)
#at first we need to find out how many centers we use for the clustering
kme = sapply(2:7, function(k) {
kmeans(kd.prob.top, centers = k)$tot.withinss
})
plot(2:7, kme, type = "b", pch = 19, xlab = "Number of clusters K")
#the elbow plot does not give clear information about the ideal number of clusters, but we will use five centers (silhouette plot is in progress)
#performing clustering
km <- kmeans(kd.prob.top, 5)
#extracting the colors
group <- as.factor(km$cluster)
#plotting PCA as before
ggplot(PCi,aes(x=PC1,y=PC2,col=group))+geom_point(size=2.5)
#a data frame is created to print the results in
po <- as.data.frame(1)
#the loop will create 10000 kmeans cluster
for (j in 0:100) {   #!!!!!!! hier bevor ihrs abgebt 10000 eintragen, dauert dann nur bissl länger zu knitten!!!!!
#a kmeans cluster is formed
km <- kmeans(kd.prob.top, 5)
#the number of the cluster is extracted (1 to 5)
kem <- (km[["cluster"]])
kem <- as.data.frame(kem)
#we add the rownames from the annotation matrix to validate the cell lines have the right assignment
kem$id <- rownames(annotation)
#we need another loop to check each of the five clusters
for(i in 1:5) {
#at first the variable has to be loaded with the Drivermutaions that occur two or more times in the cell lines
kp <- anno_eins[which(rownames(anno_eins) %in% kem[which(kem$kem %in% i),]$id),];
#we transpose kp for a easier workflow and transform it to a data frame
kp <- t(kp);
kp <- as.data.frame(kp);
#and we count the number how often the mutation occurs in that group
kp$summe <- apply(kp, 1, function(x) { sum(x)});
#now we delete genes that are mutated in less than 67% of the cell lines
kp <- kp[which(kp$summe > 0.666*NCOL(kp)),];
#we remove the column "summe""
kp <- kp[, -which(colnames(kp) %in% "summe")]
#at this point the data is extracted from the loop into the data frame created before
#the following function counts the number of the round from 1 to 10000
h <- j*5+i
#we don't need groups that contain only one cell line because the mutations would not be significant
if (NCOL(kp) > 1) {
#groups with only one or without any gene in common aren't usefull as well
if (NROW(kp) > 1) {
#the data is transformed to a string and written into the data frame
po[h] <- toString(rownames(kp))
}
#the next two step have to be done otherwise there would be empty colums in between and an error comes up
else {po[h] <- "nein"}
}
else {po[h] <- "nein"}
}
}
#the data frame is transposed to get a better overview and to perform further analysis
po <- t(po)
#the combinations are counted and converted to a data frame
ko <- table(po)
ko <- as.data.frame(ko)
#they are order after the most frequency
ko <- ko[order(ko$Freq, decreasing = T),]
#and the "nein" row is deleted
ko <- ko[-which(ko$po %in% "nein"),]
#a barplot is created to visualize the data
similar_mutations <- ko$po
ggplot(data = ko) +
geom_col(mapping = aes(x = ko$po, y = ko$Freq, fill = similar_mutations), show.legend = T) +
labs(x = "Mutated gene", y = "Frequency", title = "Frequency of specific kmeans cluster")
#we add the column subtype desease to the matrix
kem$sd <- annotation$Subtype.Disease
#a data frame is created to print the results in
po <- as.data.frame(1)
#the loop will create 10000 kmeans cluster
for (j in 0:300) {   #!!!!!!! hier bevor ihrs abgebt 10000 eintragen, dauert dann nur bissl länger zu knitten!!!!!
#a kmeans cluster is formed
km <- kmeans(kd.prob.top, 5)
#the number of the cluster is extracted (1 to 5)
kem <- (km[["cluster"]])
kem <- as.data.frame(kem)
#we add the rownames from the annotation matrix to validate the cell lines have the right assignment
kem$id <- rownames(annotation)
#we need another loop to check each of the five clusters
for(i in 1:5) {
#at first the variable has to be loaded with the Drivermutaions that occur two or more times in the cell lines
kp <- anno_eins[which(rownames(anno_eins) %in% kem[which(kem$kem %in% i),]$id),];
#we transpose kp for a easier workflow and transform it to a data frame
kp <- t(kp);
kp <- as.data.frame(kp);
#and we count the number how often the mutation occurs in that group
kp$summe <- apply(kp, 1, function(x) { sum(x)});
#now we delete genes that are mutated in less than 67% of the cell lines
kp <- kp[which(kp$summe > 0.666*NCOL(kp)),];
#we remove the column "summe""
kp <- kp[, -which(colnames(kp) %in% "summe")]
#at this point the data is extracted from the loop into the data frame created before
#the following function counts the number of the round from 1 to 10000
h <- j*5+i
#we don't need groups that contain only one cell line because the mutations would not be significant
if (NCOL(kp) > 1) {
#groups with only one or without any gene in common aren't usefull as well
if (NROW(kp) > 1) {
#the data is transformed to a string and written into the data frame
po[h] <- toString(rownames(kp))
}
#the next two step have to be done otherwise there would be empty colums in between and an error comes up
else {po[h] <- "nein"}
}
else {po[h] <- "nein"}
}
}
#the data frame is transposed to get a better overview and to perform further analysis
po <- t(po)
#the combinations are counted and converted to a data frame
ko <- table(po)
ko <- as.data.frame(ko)
#they are order after the most frequency
ko <- ko[order(ko$Freq, decreasing = T),]
#and the "nein" row is deleted
ko <- ko[-which(ko$po %in% "nein"),]
#a barplot is created to visualize the data
similar_mutations <- ko$po
ggplot(data = ko) +
geom_col(mapping = aes(x = ko$po, y = ko$Freq, fill = similar_mutations), show.legend = T) +
labs(x = "Mutated gene", y = "Frequency", title = "Frequency of specific kmeans cluster")
#we add the column subtype desease to the matrix
kem$sd <- annotation$Subtype.Disease
View(anno)
View(anno)
View(anno_eins)
View(anno_eins$NFASC)
View(anno_eins$KMT2B)
View(anno_eins$NFASC)
View(anno_eins$TNRC6C)
View(anno_eins$KMT2D)
View(anno_eins$ARID1A)
View(anno_eins$NOX5)
View(anno_eins$PTEN)
View(anno)
View(kem)
#a data frame is created to print the results in
po <- as.data.frame(1)
#the loop will create 10000 kmeans cluster
for (j in 0:1000) {   #!!!!!!! hier bevor ihrs abgebt 10000 eintragen, dauert dann nur bissl länger zu knitten!!!!!
#a kmeans cluster is formed
km <- kmeans(kd.prob.top, 5)
#the number of the cluster is extracted (1 to 5)
kem <- (km[["cluster"]])
kem <- as.data.frame(kem)
#we add the rownames from the annotation matrix to validate the cell lines have the right assignment
kem$id <- rownames(annotation)
#we need another loop to check each of the five clusters
for(i in 1:5) {
#at first the variable has to be loaded with the Drivermutaions that occur two or more times in the cell lines
kp <- anno_eins[which(rownames(anno_eins) %in% kem[which(kem$kem %in% i),]$id),];
#we transpose kp for a easier workflow and transform it to a data frame
kp <- t(kp);
kp <- as.data.frame(kp);
#and we count the number how often the mutation occurs in that group
kp$summe <- apply(kp, 1, function(x) { sum(x)});
#now we delete genes that are mutated in less than 67% of the cell lines
kp <- kp[which(kp$summe > 0.666*NCOL(kp)),];
#we remove the column "summe""
kp <- kp[, -which(colnames(kp) %in% "summe")]
#at this point the data is extracted from the loop into the data frame created before
#the following function counts the number of the round from 1 to 10000
h <- j*5+i
#we don't need groups that contain only one cell line because the mutations would not be significant
if (NCOL(kp) > 1) {
#groups with only one or without any gene in common aren't usefull as well
if (NROW(kp) > 1) {
#the data is transformed to a string and written into the data frame
po[h] <- toString(rownames(kp))
}
#the next two step have to be done otherwise there would be empty colums in between and an error comes up
else {po[h] <- "nein"}
}
else {po[h] <- "nein"}
}
}
#the data frame is transposed to get a better overview and to perform further analysis
po <- t(po)
#the combinations are counted and converted to a data frame
ko <- table(po)
ko <- as.data.frame(ko)
#they are order after the most frequency
ko <- ko[order(ko$Freq, decreasing = T),]
#and the "nein" row is deleted
ko <- ko[-which(ko$po %in% "nein"),]
#a barplot is created to visualize the data
similar_mutations <- ko$po
ggplot(data = ko) +
geom_col(mapping = aes(x = ko$po, y = ko$Freq, fill = similar_mutations), show.legend = T) +
labs(x = "Mutated gene", y = "Frequency", title = "Frequency of specific kmeans cluster")
#we add the column subtype desease to the matrix
kem$sd <- annotation$Subtype.Disease
ggplot(data = ko) +
geom_col(mapping = aes(x = ko$po, y = ko$Freqs), show.legend = T) +
labs(x = "Mutated gene", y = "Frequency", title = "Frequency of specific kmeans cluster")
ggplot(data = ko) +
geom_col(mapping = aes(x = ko$po, y = ko$Freq, col = similar_mutations), show.legend = T) +
labs(x = "Mutated gene", y = "Frequency", title = "Frequency of specific kmeans cluster")
ggplot(data = ko) +
geom_col(mapping = aes(x = ko$po, y = ko$Freq, fill = similar_mutations), show.legend = T) +
labs(x = "Mutated gene", y = "Frequency", title = "Frequency of specific kmeans cluster")
ggplot(data = ko) +
geom_col(mapping = aes(x = ko$po, y = ko$Freq, fill = similar_mutations), show.legend
)
ggplot(data = ko) +
geom_col(mapping = aes(x = clarity, y = ko$Freq, fill = similar_mutations), show.legend = T) +
labs(x = "Mutated gene", y = "Frequency", title = "Frequency of specific kmeans cluster")
ggplot(data = ko) +
geom_col(mapping = aes(x = ko$po, y = ko$Freq, fill = similar_mutations), show.legend = T) + +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
labs(x = "Mutated gene", y = "Frequency", title = "Frequency of specific kmeans cluster")
ggplot(data = ko) +
geom_col(mapping = aes(x = ko$po, y = ko$Freq, fill = similar_mutations), show.legend = T) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(x = "Mutated gene", y = "Frequency", title = "Frequency of specific kmeans cluster")
heatmap(anno, Rowv = NA, Colv = NA, main = "Occuring Drivermutations",xlab = "Mutated Gene", ylab = "cell line", col = heat.colors(5),  cexCol = 0.9, cexRow = 0.3)
legend("topright", pch = 15, col = cols, legend = co$kat, bty = 'n', cex = 0.6)
legend("topleft", pch = 15, col = cols, legend = co$kat, bty = 'n', cex = 0.6)
View(anno)
ggplot(anno, aes(rownames(anno), colnames(anno))) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")
anno <- as.data.frame(anno)
ggplot(anno, aes(rownames(anno), colnames(anno))) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")
anno <- as.data.frame(anno)
ggplot(anno, aes(rownames(anno), colnames(anno))) + geom_tile(aes(fill = co$kat),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")
anno <- as.data.frame(anno)
ggplot(anno, aes(rownames(anno), colnames(anno))) + geom_tile(aes(fill = rownames(anno)),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")
anno <- as.data.frame(anno)
ggplot(anno, aes(rownames(anno), colnames(anno)))
ggplot(anno)
anno <- as.data.frame(anno)
anno <- melt(anno)
anno <- ddply(anno, .(variable), transform,
rescale = rescale(value))
ggplot(anno, aes(rownames(anno), colnames(anno))) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")
anno <- as.data.frame(anno)
anno <- melt(anno)
anno <- ddply(anno, .(variable), transform,
rescale = rescale(value))
ggplot(anno, aes(rownames(anno), colnames(anno))) + geom_tile(aes(fill = 1),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")
dm <- new_uniq[which(new_uniq$Hugo_Symbol %in% dm_null$Var1), ]
#function to find out if the Mutation occurs in the cell lines: "1" means yes and "0" means no
anno <- apply(dm_null, 1, function(x) {annotation[x]<- ifelse(rownames(annotation) %in% dm[which(dm$Hugo_Symbol %in% x), ]$DepMap_ID, 1, 0)})
#we have to transform the matrix to a data frame for further steps
anno <- as.data.frame(anno)
#we add the names of the cell lines to the matrix
rownames(anno) <- rownames(annotation)
#now we sum up how many TRUE occur in each cell line
anno$summe <- apply(anno, 1, function(x) { sum(x)})
#to get a better overview we use only the drivermutations that occur in more than 3 cell lines (the other two are needed in step 5)
dm_drei <- dm_null[which(dm_null$Freq > 3), ]
dm_zwei <- dm_null[which(dm_null$Freq > 2), ]
dm_eins <- dm_null[which(dm_null$Freq > 1), ]
#these two are extracted for step 5
anno_zwei <- anno[, which(colnames(anno) %in% rownames(dm_zwei))]
anno_zwei <- as.data.frame(anno_zwei)
anno_eins <- anno[, which(colnames(anno) %in% rownames(dm_eins))]
anno_eins <- as.data.frame(anno_eins)
anno <- anno[, which(colnames(anno) %in% rownames(dm_drei))]
#we have to bring the cell lines in a better order: so we put the cell lines with the most mutations together and decrease it upwards.
anno$summe <- apply(anno, 1, function(x) { sum(x)})
anno <- anno[order(anno$summe, decreasing = TRUE),]
#we remove columns which should not be plotted
anno <- anno[, -which(colnames(anno) == "summe")]
#and bring the matrix in a format the function "heatmap" can plot
anno <- data.matrix(anno)
#we create a color palette containing the colors we want to use
cols <- heat.colors(5)
mypalette <- colorRampPalette(cols)(2)
#we also add a second column to the matrix to include color associated Explanations for the legend
co <- as.data.frame(cols)
co$kat <- c("not mutated", "mutated (> 9 mutations)", "mutated (> 3 mutations)", "mutated (> 1 mutations)", "mutated (1 mutation)")
anno <- as.data.frame(anno)
anno <- melt(anno)
anno <- ddply(anno, .(variable), transform,
rescale = rescale(value))
ggplot(anno, aes(rownames(anno), colnames(anno))) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")
dm <- new_uniq[which(new_uniq$Hugo_Symbol %in% dm_null$Var1), ]
#function to find out if the Mutation occurs in the cell lines: "1" means yes and "0" means no
anno <- apply(dm_null, 1, function(x) {annotation[x]<- ifelse(rownames(annotation) %in% dm[which(dm$Hugo_Symbol %in% x), ]$DepMap_ID, 1, 0)})
#we have to transform the matrix to a data frame for further steps
anno <- as.data.frame(anno)
#we add the names of the cell lines to the matrix
rownames(anno) <- rownames(annotation)
#now we sum up how many TRUE occur in each cell line
anno$summe <- apply(anno, 1, function(x) { sum(x)})
#to get a better overview we use only the drivermutations that occur in more than 3 cell lines (the other two are needed in step 5)
dm_drei <- dm_null[which(dm_null$Freq > 3), ]
dm_zwei <- dm_null[which(dm_null$Freq > 2), ]
dm_eins <- dm_null[which(dm_null$Freq > 1), ]
#these two are extracted for step 5
anno_zwei <- anno[, which(colnames(anno) %in% rownames(dm_zwei))]
anno_zwei <- as.data.frame(anno_zwei)
anno_eins <- anno[, which(colnames(anno) %in% rownames(dm_eins))]
anno_eins <- as.data.frame(anno_eins)
anno <- anno[, which(colnames(anno) %in% rownames(dm_drei))]
#we have to bring the cell lines in a better order: so we put the cell lines with the most mutations together and decrease it upwards.
anno$summe <- apply(anno, 1, function(x) { sum(x)})
anno <- anno[order(anno$summe, decreasing = TRUE),]
#we remove columns which should not be plotted
anno <- anno[, -which(colnames(anno) == "summe")]
#and bring the matrix in a format the function "heatmap" can plot
anno <- data.matrix(anno)
#we create a color palette containing the colors we want to use
cols <- heat.colors(5)
mypalette <- colorRampPalette(cols)(2)
#we also add a second column to the matrix to include color associated Explanations for the legend
co <- as.data.frame(cols)
co$kat <- c("not mutated", "mutated (> 9 mutations)", "mutated (> 3 mutations)", "mutated (> 1 mutations)", "mutated (1 mutation)")
anno <- as.data.frame(anno)
anno <- melt(anno)
anno <- ddply(anno, .(variable), transform,
rescale = rescale(value))
ggplot(anno, aes(rownames(anno), colnames(anno))) + geom_tile(aes(fill = 1),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")
