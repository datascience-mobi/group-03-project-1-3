prob.topVar = kd.prob[topVar > quantile(topVar, probs = 0.75), ]
pca = prcomp(kd.prob.topVar, center = F, scale. = F)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
help(legend)
legend("topright", pch = 20, col= c("blue", "lightblue"), legend = c("Day 1","Day 2"), bty='n', cex=.75)
topVar = apply(kd.prob, 1, var)
prob.topVar = kd.prob[topVar > quantile(topVar, probs = 0.75), ]
pca = prcomp(kd.prob.topVar, center = F, scale. = F)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & SM", "ARID1A only", "ARID1A & SM", "TP53 & ARID1A", "no TP53 & no ARID"), bty='n', cex=.75)
pca = prcomp(kd.prob.topVar, center = F, scale. = F)
#we plot the pca with the different colors for cell lines with similar Driver Mutations
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.75)
ggplot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
library(ggplot2)
ggplot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
ggplot(pca$rotation[, 1], pca$rotation[, 2], aes(hwy, cty)) + geom_point(aes(color = pcb))
p <-ggplot (pca,aes(x=PC1,y=PC2,color=pcb ))
p <-ggplot (pcamat,aes(x=PC1,y=PC2,color=pcb ))
p
p<-p+geom_point()+theme + xlab(percentage[1]) + ylab(percentage[2]) + scale_color_manual(values=c("#FFFF00", "#00FFFF", "#FF00FF"))
p
load("~/GitHub/project-01-group-03/OCdata.RDS.RData")
rm(annodm)
rm(cb)
rm(dm)
View(dmARID1A)
rm(dmSYNE1, dmARID1A, dmATM)
rm(dmPTPRF, dmTHBS3, dmTP53, dmBAI1)
rm(pca)
rm(prob.topVar)
rm(anno)
rm(topvar)
rm(topVar)
rm(NAV)
rm(rmv.rows)
rm(cb1)
save.image("~/GitHub/project-01-group-03/OCdata.RDS.RData")
topVar = apply(kd.prob, 1, var)
tree = kd.prob[topVar > quantile(topVar, probs = 0.75),]
anno <- annotation
rm(topVar)
#to use the function colored_Bars the row and colnames have to be transformed to integer values
colnames(tree) <- c(1:34)
rownames(anno) <- c(1:34)
#the following code calculates the hierachical cluster and plots it
cor.mat = cor(tree, method = "spearman")
cor.dist = as.dist(1 - cor.mat)
cor.hc = hclust(cor.dist, method = "ward.D2")
cor.hc = as.dendrogram(cor.hc)
cb7 <- ifelse(anno$has_TP53 == "TRUE", "forestgreen", "firebrick")
cb6 <- ifelse(anno$has_ARID1A == "TRUE", "forestgreen", "firebrick")
cb5 <- ifelse(anno$has_ATM == "TRUE", "forestgreen", "firebrick")
cb4 <- ifelse(anno$has_PTPRF == "TRUE", "forestgreen", "firebrick")
cb3 <- ifelse(anno$has_BAI1 == "TRUE", "forestgreen", "firebrick")
cb2 <- ifelse(anno$has_SYNE1 == "TRUE", "forestgreen", "firebrick")
cb1 <- ifelse(anno$has_THBS3 == "TRUE", "forestgreen", "firebrick")
#we have to bind them in one variable
cb <- cbind(`THBS3` = cb1, `SYNE1` = cb2, `BAI1` = cb3, `PTPRF` = cb4, `ATM` = cb5, `ARID1A` = cb6, `TP53` = cb7)
#and add it to the cluster
colored_bars(colors = cb, dend = cor.hc)
plot(cor.hc, las = 2, cex.lab = 0.7)
cb7 <- ifelse(anno$has_TP53 == "TRUE", "forestgreen", "firebrick")
cb6 <- ifelse(anno$has_ARID1A == "TRUE", "forestgreen", "firebrick")
cb5 <- ifelse(anno$has_ATM == "TRUE", "forestgreen", "firebrick")
cb4 <- ifelse(anno$has_PTPRF == "TRUE", "forestgreen", "firebrick")
cb3 <- ifelse(anno$has_BAI1 == "TRUE", "forestgreen", "firebrick")
cb2 <- ifelse(anno$has_SYNE1 == "TRUE", "forestgreen", "firebrick")
cb1 <- ifelse(anno$has_THBS3 == "TRUE", "forestgreen", "firebrick")
#we have to bind them in one variable
cb <- cbind(`THBS3` = cb1, `SYNE1` = cb2, `BAI1` = cb3, `PTPRF` = cb4, `ATM` = cb5, `ARID1A` = cb6, `TP53` = cb7)
#and add it to the cluster
colored_bars(colors = cb, dend = cor.hc)
View(cb)
dm <- new_uniq[which(new_uniq$Hugo_Symbol %in% DriverMutation$Var1), ]
#and delete unnecesary columns
dm = dm[, -which(colnames(dm) %in% c("Chromosome", "isDeleterious", "Variant_annotation"))]
#lets check out how many Drivermutations are common in the cell lines
table(dm$DepMap_ID)
#to get acces to the single cell lines we have to create single matrices for every Drivermutation
dmTP53 = dm[which(dm$Hugo_Symbol == "TP53"), ]
dmARID1A = dm[which(dm$Hugo_Symbol == "ARID1A"), ]
dmATM = dm[which(dm$Hugo_Symbol == "ATM"), ]
dmBAI1 = dm[which(dm$Hugo_Symbol == "BAI1"), ]
dmPTPRF = dm[which(dm$Hugo_Symbol == "PTPRF"), ]
dmSYNE1 = dm[which(dm$Hugo_Symbol == "SYNE1"), ]
dmTHBS3 = dm[which(dm$Hugo_Symbol == "THBS3"), ]
#now we add new colums to the annotation matrix containing information about which cell line contains which Drivermutation
annotation$has_TP53 <- ifelse(rownames(anno) %in% dmTP53$DepMap_ID, TRUE, FALSE)
annotation$has_ARID1A <- ifelse(rownames(anno) %in% dmARID1A$DepMap_ID, TRUE, FALSE)
annotation$has_ATM <- ifelse(rownames(anno) %in% dmATM$DepMap_ID, TRUE, FALSE)
annotation$has_BAI1 <- ifelse(rownames(anno) %in% dmBAI1$DepMap_ID, TRUE, FALSE)
annotation$has_PTPRF <- ifelse(rownames(anno) %in% dmPTPRF$DepMap_ID, TRUE, FALSE)
annotation$has_SYNE1 <- ifelse(rownames(anno) %in% dmSYNE1$DepMap_ID, TRUE, FALSE)
annotation$has_THBS3 <- ifelse(rownames(anno) %in% dmTHBS3$DepMap_ID, TRUE, FALSE)
#to be continued
topVar = apply(kd.prob, 1, var)
tree = kd.prob[topVar > quantile(topVar, probs = 0.75),]
anno <- annotation
rm(topVar)
#to use the function colored_Bars the row and colnames have to be transformed to integer values
colnames(tree) <- c(1:34)
rownames(anno) <- c(1:34)
#the following code calculates the hierachical cluster and plots it
cor.mat = cor(tree, method = "spearman")
cor.dist = as.dist(1 - cor.mat)
cor.hc = hclust(cor.dist, method = "ward.D2")
cor.hc = as.dendrogram(cor.hc)
#to get a good overview we add colored bars under the cluster
#the following code defines colors for our 7 main Drivermutations
cb7 <- ifelse(anno$has_TP53 == "TRUE", "forestgreen", "firebrick")
cb6 <- ifelse(anno$has_ARID1A == "TRUE", "forestgreen", "firebrick")
cb5 <- ifelse(anno$has_ATM == "TRUE", "forestgreen", "firebrick")
cb4 <- ifelse(anno$has_PTPRF == "TRUE", "forestgreen", "firebrick")
cb3 <- ifelse(anno$has_BAI1 == "TRUE", "forestgreen", "firebrick")
cb2 <- ifelse(anno$has_SYNE1 == "TRUE", "forestgreen", "firebrick")
cb1 <- ifelse(anno$has_THBS3 == "TRUE", "forestgreen", "firebrick")
#we have to bind them in one variable
cb <- cbind(`THBS3` = cb1, `SYNE1` = cb2, `BAI1` = cb3, `PTPRF` = cb4, `ATM` = cb5, `ARID1A` = cb6, `TP53` = cb7)
#and add it to the cluster
colored_bars(colors = cb, dend = cor.hc)
View(anno)
annotation$has_TP53 <- ifelse(rownames(annotation) %in% dmTP53$DepMap_ID, TRUE, FALSE)
annotation$has_ARID1A <- ifelse(rownames(annotation) %in% dmARID1A$DepMap_ID, TRUE, FALSE)
annotation$has_ATM <- ifelse(rownames(annotation) %in% dmATM$DepMap_ID, TRUE, FALSE)
annotation$has_BAI1 <- ifelse(rownames(annotation) %in% dmBAI1$DepMap_ID, TRUE, FALSE)
annotation$has_PTPRF <- ifelse(rownames(annotation) %in% dmPTPRF$DepMap_ID, TRUE, FALSE)
annotation$has_SYNE1 <- ifelse(rownames(annotation) %in% dmSYNE1$DepMap_ID, TRUE, FALSE)
annotation$has_THBS3 <- ifelse(rownames(annotation) %in% dmTHBS3$DepMap_ID, TRUE, FALSE)
View(anno)
topVar = apply(kd.prob, 1, var)
tree = kd.prob[topVar > quantile(topVar, probs = 0.75),]
anno <- annotation
rm(topVar)
#to use the function colored_Bars the row and colnames have to be transformed to integer values
colnames(tree) <- c(1:34)
rownames(anno) <- c(1:34)
#the following code calculates the hierachical cluster and plots it
cor.mat = cor(tree, method = "spearman")
cor.dist = as.dist(1 - cor.mat)
cor.hc = hclust(cor.dist, method = "ward.D2")
cor.hc = as.dendrogram(cor.hc)
#to get a good overview we add colored bars under the cluster
#the following code defines colors for our 7 main Drivermutations
cb7 <- ifelse(anno$has_TP53 == "TRUE", "forestgreen", "firebrick")
cb6 <- ifelse(anno$has_ARID1A == "TRUE", "forestgreen", "firebrick")
cb5 <- ifelse(anno$has_ATM == "TRUE", "forestgreen", "firebrick")
cb4 <- ifelse(anno$has_PTPRF == "TRUE", "forestgreen", "firebrick")
cb3 <- ifelse(anno$has_BAI1 == "TRUE", "forestgreen", "firebrick")
cb2 <- ifelse(anno$has_SYNE1 == "TRUE", "forestgreen", "firebrick")
cb1 <- ifelse(anno$has_THBS3 == "TRUE", "forestgreen", "firebrick")
#we have to bind them in one variable
cb <- cbind(`THBS3` = cb1, `SYNE1` = cb2, `BAI1` = cb3, `PTPRF` = cb4, `ATM` = cb5, `ARID1A` = cb6, `TP53` = cb7)
#and add it to the cluster
colored_bars(colors = cb, dend = cor.hc)
View(annotation)
load("~/GitHub/project-01-group-03/OCdata.RDS.RData")
dm <- new_uniq[which(new_uniq$Hugo_Symbol %in% DriverMutation$Var1), ]
#and delete unnecesary columns
dm = dm[, -which(colnames(dm) %in% c("Chromosome", "isDeleterious", "Variant_annotation"))]
#lets check out how many Drivermutations are common in the cell lines
table(dm$DepMap_ID)
#to get acces to the single cell lines we have to create single matrices for every Drivermutation
dmTP53 = dm[which(dm$Hugo_Symbol == "TP53"), ]
dmARID1A = dm[which(dm$Hugo_Symbol == "ARID1A"), ]
dmATM = dm[which(dm$Hugo_Symbol == "ATM"), ]
dmBAI1 = dm[which(dm$Hugo_Symbol == "BAI1"), ]
dmPTPRF = dm[which(dm$Hugo_Symbol == "PTPRF"), ]
dmSYNE1 = dm[which(dm$Hugo_Symbol == "SYNE1"), ]
dmTHBS3 = dm[which(dm$Hugo_Symbol == "THBS3"), ]
#now we add new colums to the annotation matrix containing information about which cell line contains which Drivermutation
annotation$has_TP53 <- ifelse(rownames(annotation) %in% dmTP53$DepMap_ID, TRUE, FALSE)
annotation$has_ARID1A <- ifelse(rownames(annotation) %in% dmARID1A$DepMap_ID, TRUE, FALSE)
annotation$has_ATM <- ifelse(rownames(annotation) %in% dmATM$DepMap_ID, TRUE, FALSE)
annotation$has_BAI1 <- ifelse(rownames(annotation) %in% dmBAI1$DepMap_ID, TRUE, FALSE)
annotation$has_PTPRF <- ifelse(rownames(annotation) %in% dmPTPRF$DepMap_ID, TRUE, FALSE)
annotation$has_SYNE1 <- ifelse(rownames(annotation) %in% dmSYNE1$DepMap_ID, TRUE, FALSE)
annotation$has_THBS3 <- ifelse(rownames(annotation) %in% dmTHBS3$DepMap_ID, TRUE, FALSE)
#to be continued
topVar = apply(kd.prob, 1, var)
tree = kd.prob[topVar > quantile(topVar, probs = 0.75),]
anno <- annotation
rm(topVar)
#to use the function colored_Bars the row and colnames have to be transformed to integer values
colnames(tree) <- c(1:34)
rownames(anno) <- c(1:34)
#the following code calculates the hierachical cluster and plots it
cor.mat = cor(tree, method = "spearman")
cor.dist = as.dist(1 - cor.mat)
cor.hc = hclust(cor.dist, method = "ward.D2")
cor.hc = as.dendrogram(cor.hc)
plot(cor.hc, las = 2, cex.lab = 0.7)
#to get a good overview we add colored bars under the cluster
#the following code defines colors for our 7 main Drivermutations
cb7 <- ifelse(anno$has_TP53 == "TRUE", "forestgreen", "firebrick")
cb6 <- ifelse(anno$has_ARID1A == "TRUE", "forestgreen", "firebrick")
cb5 <- ifelse(anno$has_ATM == "TRUE", "forestgreen", "firebrick")
cb4 <- ifelse(anno$has_PTPRF == "TRUE", "forestgreen", "firebrick")
cb3 <- ifelse(anno$has_BAI1 == "TRUE", "forestgreen", "firebrick")
cb2 <- ifelse(anno$has_SYNE1 == "TRUE", "forestgreen", "firebrick")
cb1 <- ifelse(anno$has_THBS3 == "TRUE", "forestgreen", "firebrick")
#we have to bind them in one variable
cb <- cbind(`THBS3` = cb1, `SYNE1` = cb2, `BAI1` = cb3, `PTPRF` = cb4, `ATM` = cb5, `ARID1A` = cb6, `TP53` = cb7)
#and add it to the cluster
colored_bars(colors = cb, dend = cor.hc)
#to investigate which cell lines contain which drivermutation we create a new data frame containing only the colums about our four Drivermutations
annodm <- annotation[, -which(colnames(anno) %in% c("CCLE_Name", "Subtype.Disease", "has_BAI1", "has_SYNE1", "has_THBS3"))]
#to seperate the cell lines in groups with similar Mutations we give every Drivermutation a specific value: If TP53 is True in the cell line it gets a "1000" , if it isnt ther will be a "0"
annodm$has_TP53 <- ifelse(rownames(anno) %in% dmTP53$DepMap_ID, 1000, 0)
#same here, ARID1A gets a "100" for True and a "0" for FALSE
annodm$has_ARID1A <- ifelse(rownames(anno) %in% dmARID1A$DepMap_ID, 100, 0)
#and the same for the next Mutations
annodm$has_ATM <- ifelse(rownames(anno) %in% dmATM$DepMap_ID, 10, 0)
annodm$has_PTPRF <- ifelse(rownames(anno) %in% dmPTPRF$DepMap_ID, 1, 0)
#we can now sum up these values in a new column
annodm$summe <- apply(annodm, 1, function(x) { sum(x)})
#we picked the most common combinations and gave them different categories by their sums
annodm$kat <- ifelse(annodm$summe == 1000, "TP_only", ifelse(annodm$summe > 1099, "TP+AR", ifelse(annodm$summe == 100, "AR_only", ifelse(annodm$summe == 110, "AR+AT", ifelse(annodm$summe == 101, "AR+PT", ifelse(annodm$summe < 100, "no_TP+no_AR", ifelse(annodm$summe == 0, "nix", "TP+SM")))))))
#we also gave them different colors by using the same function as before
pcb <- ifelse(annodm$summe == 1000, "lightblue", ifelse(annodm$summe > 1099, "purple",  ifelse(annodm$summe == 100, "pink",  ifelse(annodm$summe == 110, "red", ifelse(annodm$summe == 101, "red", ifelse(annodm$summe == 11, "green", ifelse(annodm$summe == 10, "grey",ifelse(annodm$summe == 0, "grey","blue"))))))))
#and we added another column to the matrix containing that colors
annodm$col <- pcb
topVar = apply(kd.prob, 1, var) # calculate variance over all rows (genes)
summary(topVar)
kd.prob.topVar = kd.prob[topVar > quantile(topVar, probs = 0.75), ] # new data frame with just the genes whose knockout leads to highly variant cell death events -> perhaps our synthetic lethality interaction partners?
dim(kd.prob.topVar) # show me how many genes we are looking at now
mean.survival.prob <- apply(kd.prob.topVar, 1, mean) # calculate the mean cell survival probability of the remaining genes
summary(mean.survival.prob) # show me the mean survival distribution of the genes whose knockout leads to the most variant cell survival
plot(density(as.matrix(mean.survival.prob))) # plot me the distribution of cell survival probability of most variant survivals
#weiß noch nicht, wie sinnvoll das alles ist :D mal sehen
#we use the colors defined in step 4 for our co existing muattions
pcb <- cbind(`TP` = pcb)
#keine Ahnung warum ich das machen muss ich frag david noch... aber ohne gehts net
#this function calculates the PCA with the variance calculated bafore
pca = prcomp(kd.prob.topVar, center = F, scale. = F)
#we plot the pca with the different colors for cell lines with similar Driver Mutations
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
#we also add a legend to the plot
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.75)
View(anno)
View(annodm)
#to investigate which cell lines contain which drivermutation we create a new data frame containing only the colums about our four Drivermutations
annodm <- annotation[, -which(colnames(annotation) %in% c("CCLE_Name", "Subtype.Disease", "has_BAI1", "has_SYNE1", "has_THBS3"))]
#to seperate the cell lines in groups with similar Mutations we give every Drivermutation a specific value: If TP53 is True in the cell line it gets a "1000" , if it isnt ther will be a "0"
annodm$has_TP53 <- ifelse(rownames(annotation) %in% dmTP53$DepMap_ID, 1000, 0)
#same here, ARID1A gets a "100" for True and a "0" for FALSE
annodm$has_ARID1A <- ifelse(rownames(annotation) %in% dmARID1A$DepMap_ID, 100, 0)
#and the same for the next Mutations
annodm$has_ATM <- ifelse(rownames(annotation) %in% dmATM$DepMap_ID, 10, 0)
annodm$has_PTPRF <- ifelse(rownames(annotation) %in% dmPTPRF$DepMap_ID, 1, 0)
#we can now sum up these values in a new column
annodm$summe <- apply(annodm, 1, function(x) { sum(x)})
annodm$kat <- ifelse(annodm$summe == 1000, "TP_only", ifelse(annodm$summe > 1099, "TP+AR", ifelse(annodm$summe == 100, "AR_only", ifelse(annodm$summe == 110, "AR+AT", ifelse(annodm$summe == 101, "AR+PT", ifelse(annodm$summe < 100, "no_TP+no_AR", ifelse(annodm$summe == 0, "nix", "TP+SM")))))))
#we also gave them different colors by using the same function as before
pcb <- ifelse(annodm$summe == 1000, "lightblue", ifelse(annodm$summe > 1099, "purple",  ifelse(annodm$summe == 100, "pink",  ifelse(annodm$summe == 110, "red", ifelse(annodm$summe == 101, "red", ifelse(annodm$summe == 11, "green", ifelse(annodm$summe == 10, "grey",ifelse(annodm$summe == 0, "grey","blue"))))))))
#and we added another column to the matrix containing that colors
annodm$col <- pcb
#we use the colors defined in step 4 for our co existing muattions
pcb <- cbind(`TP` = pcb)
#keine Ahnung warum ich das machen muss ich frag david noch... aber ohne gehts net
#this function calculates the PCA with the variance calculated bafore
pca = prcomp(kd.prob.topVar, center = F, scale. = F)
#we plot the pca with the different colors for cell lines with similar Driver Mutations
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
#we also add a legend to the plot
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.75)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 40, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.75)
legend("topright", pch = 30, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.75)
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.75)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.75)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 30, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.75)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 1, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.75)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 2, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.75)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.75)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.50)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.100)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=.99)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=1.99)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=1.5)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= c("lightblue", "blue", "pink", "red", "purple", "grey"), legend = c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"), bty='n', cex=1.3)
colors <- c("blue", "darkblue", "yellow", "orange", "green", "grey")
cat$col <- colors
cat <- as.data.frame(colors)
View(cat)
cat$cat <- c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A"))
cat$cat <- c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A")
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= cat$colors, legend = cat$cat, bty='n', cex=1.3)
View(cat)
pcb <- ifelse(annodm$summe == 1000, "blue", ifelse(annodm$summe > 1099, "green",  ifelse(annodm$summe == 100, "orange",  ifelse(annodm$summe == 110, "red", ifelse(annodm$summe == 101, "red",  ifelse(annodm$summe == 10, "grey",ifelse(annodm$summe == 0, "grey","darkblue")))))))
annodm$col <- pcb
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
pcb <- cbind(`TP` = pcb)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
colors <- c("blue", "darkblue", "orange", "red", "green", "grey")
cat <- as.data.frame(colors)
cat$cat <- c("TP53 only","TP53 & sec. Mu", "ARID1A only", "ARID1A & sec. Mu", "TP53 & ARID1A", "no TP53 & no ARID1A")
legend("topright", pch = 20, col= cat$colors, legend = cat$cat, bty='n', cex=1.3)
unique(annodm$col)
unique(annodm$kat)
annodm$kat <- ifelse(annodm$summe == 1000, "TP53 only", ifelse(annodm$summe > 1099, "TP53 & ARID1A", ifelse(annodm$summe == 100, "ARID1A only", ifelse(annodm$summe == 110, "ARID1A & sec. Mu", ifelse(annodm$summe == 101, "ARID1A & sec. Mu", ifelse(annodm$summe < 100, "no TP53 & no ARID1A", ifelse(annodm$summe == 0, "no TP53 & no ARID1A", "TP53 & sec. Mu")))))))
View(annodm)
pcb <- ifelse(annodm$summe == 1000, "blue", ifelse(annodm$summe > 1099, "green",  ifelse(annodm$summe == 100, "orange",  ifelse(annodm$summe == 110, "red", ifelse(annodm$summe == 101, "red",  ifelse(annodm$summe == 10, "grey",ifelse(annodm$summe == 0, "grey","darkblue")))))))
#and we added another column to the matrix containing that colors
annodm$col <- pcb
View(annodm)
pcb <- ifelse(annodm$summe == 1000, "blue", ifelse(annodm$summe > 1099, "green",  ifelse(annodm$summe == 100, "orange",  ifelse(annodm$summe == 110, "red", ifelse(annodm$summe == 101, "red",  ifelse(annodm$summe < 100, "grey",ifelse(annodm$summe == 0, "grey","darkblue")))))))
#and we added another column to the matrix containing that colors
annodm$col <- pcb
View(annodm)
rm(cat)
annodm$kat <- ifelse(annodm$summe == 1000, "TP53 only", ifelse(annodm$summe > 1099, "TP53 & ARID1A", ifelse(annodm$summe == 100, "ARID1A only", ifelse(annodm$summe == 110, "ARID1A & sec. Mu", ifelse(annodm$summe == 101, "ARID1A & sec. Mu", ifelse(annodm$summe < 100, "no TP53 & no ARID1A", ifelse(annodm$summe == 0, "no TP53 & no ARID1A", "TP53 & sec. Mu")))))))
#we also gave them different colors by using the same function as before
pcb <- ifelse(annodm$summe == 1000, "blue", ifelse(annodm$summe > 1099, "green",  ifelse(annodm$summe == 100, "orange",  ifelse(annodm$summe == 110, "red", ifelse(annodm$summe == 101, "red",  ifelse(annodm$summe < 100, "grey",ifelse(annodm$summe == 0, "grey","darkblue")))))))
#and we added another column to the matrix containing that colors
annodm$col <- pcb
#we use the colors defined in step 4 for our co existing muattions
pcb <- cbind(`TP` = pcb)
#keine Ahnung warum ich das machen muss ich frag david noch... aber ohne gehts net
#this function calculates the PCA with the variance calculated bafore
pca = prcomp(kd.prob.topVar, center = F, scale. = F)
#we plot the pca with the different colors for cell lines with similar Driver Mutations
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
cat <- as.data.frame(unique(annodm$col))
cat$cat <- unique(annodm$kat)
legend("topright", pch = 20, col= cat$colors, legend = cat$cat, bty='n', cex=1.3)
View(cat)
rm(cat)
cat$col <- as.data.frame(unique(annodm$col))
cat$cat <- unique(annodm$kat)
rm(colors, cat)
colors <- unique(annodm$col)
cat$col <- as.data.frame(colors)
cat$cat <- unique(annodm$kat)
colors
colors <- unique(annodm$col)
cat <- as.data.frame(colors)
cat$cat <- unique(annodm$kat)
View(cat)
legend("topright", pch = 20, col= cat$colors, legend = cat$cat, bty='n', cex=1.3)
rm(colors, cat)
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
cat <- as.data.frame(unique(annodm$col))
cat$cat <- unique(annodm$kat)
legend("topright", pch = 20, col= cat$colors, legend = cat$cat, bty='n', cex=1.3)
rm(colors, cat)
colors <- unique(annodm$col)
cat <- as.data.frame(colors)
cat$cat <- unique(annodm$kat)
legend("topright", pch = 20, col= cat$colors, legend = cat$cat, bty='n', cex=1.3)
View(annodm)
topVar = apply(kd.ceres, 1, var) # calculate variance over all rows (genes)
summary(topVar)
kd.prob.topVar = kd.ceres[topVar > quantile(topVar, probs = 0.75),
]
pca = prcomp(kd.prob.topVar, center = F, scale. = F)
#we plot the pca with the different colors for cell lines with similar Driver Mutations
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
legend("topright", pch = 20, col= cat$colors, legend = cat$cat, bty='n', cex=1.3)
topVar = apply(kd.ceres, 1, var) # calculate variance over all rows (genes)
summary(topVar)
kd.prob.topVar = kd.ceres[topVar > quantile(topVar, probs = 0.9), ]
pca = prcomp(kd.prob.topVar, center = F, scale. = F)
#we plot the pca with the different colors for cell lines with similar Driver Mutations
plot(pca$rotation[, 1], pca$rotation[, 2], col = pcb[, 1], pch = 19, xlab = "PC1",      ylab = "PC2")
plot(annodm, las = 2, cex.lab = 0.7)
plot(annodm$has_TP53, las = 2, cex.lab = 0.7)
plot(annodm$summe, las = 2, cex.lab = 0.7)
View
load("~/GitHub/project-01-group-03/OCdata.RDS.RData")
View(lrm.all.genes$residuals)
Residuals <- lrm.all.genes$residuals
remove(Residuals)
View(list_all.genes)
View(list_all.genes)
View(lrm.all.genes)
list_all.genes <- list(expression,copynumber)
View(list_all.genes)
names(list_all.genes) <- c("expression","copynumber")
common_names = Reduce(intersect, lapply(list_all.genes, row.names))
View(training.all.genes)
remove(training.all.genes)
list_all.genes <- lapply(list_all.genes, function(x) {x[row.names(x) %in% common_names,]})
exp1b <- melt.data.frame(list_all.genes$expression, variable_name = "cell line")
library(reshape)
exp1b <- melt.data.frame(list_all.genes$expression, variable_name = "cell line")
cn1b <- melt.data.frame(list_all.genes$copynumber, variable_name = "cellline")
list_all.genes$expression <- list_all.genes$expression[apply(list_all.genes$expression !=0, 1, all),]
rmv.rows = apply(list_all.genes$copynumber, 1, function(x) {sum(x <= -2)}) # find all genes with values <= -2
list_all.genes$copynumber <- list_all.genes$copynumber[-which(rmv.rows > 0), ]
common_names = Reduce(intersect, lapply(list_all.genes, row.names))
list_all.genes <- lapply(list_all.genes, function(x) {x[row.names(x) %in% common_names,]})
exp1 <- melt.data.frame(list_all.genes$expression, variable_name = "cell line")
cn1 <- melt.data.frame(list_all.genes$copynumber, variable_name = "cellline")
remove(regression.driver)
Resid <- lrm.all.genes$residuals
Resid <- as.data.frame(lrm.all.genes$residuals)
View(Resid)
names(Resid) <- c("residuals")
View(Resid)
View(lrm.all.genes)
library(ggplot2)
qplot(y=Resid$residuals, x= 1, geom = "boxplot") + ggtitle("Checking the residuals") + xlab("") + ylab("residuals") + theme(axis.text.x=element_blank())
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="parcific blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="pacific blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="cerulean") + labs(title = "Distribution of the Residuals", x="residuals", y="counts")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts") + geom_density(col0"red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts") + geom_density(col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts") + geom_density(data=Resid$residuals ,col="red")
View(Resid)
View(testing.all.genes)
Resid <- data.frame(Resid)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts") + geom_density(data=Resid$residuals ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts")
remove(Resid)
Resid <- data.frame(lrm.all.genes$residuals)
typeof(Resid)
Resid <- as.matrix(lrm.all.genes$residuals)
typeof(Resid)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts") + geom_density(data=Resid$residuals ,col="red")
Resid <- as.data.frame.array(lrm.all.genes$residuals)
Resid <- as.data.frame(lrm.all.genes$residuals)
typeof(Resid)
Resid <- data.frame(lrm.all.genes$residuals)
typeof(Resid)
Resid <-data.frame(t(sapply(Resid,c)))
typeof(Resid)
remove(Resid)
Resid <- as.data.frame(lrm.all.genes$residuals)
ggplot(data = Resid, aes(Resid$`lrm.all.genes$residuals`)) + geom_histogram(bins = 30, col = "navy blue", fill="blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts") + geom_density(data=Resid, aes(Resid$`lrm.all.genes$residuals`) ,col="red")
names(Resid) <- c("residuals")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue") + labs(title = "Distribution of the Residuals", x="residuals", y="counts") + geom_density(col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha = .2) + labs(title = "Distribution of the Residuals", x="residuals", y="counts") + geom_density(col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha = .6) + labs(title = "Distribution of the Residuals", x="residuals", y="counts") + geom_density(col="red")
ggplot() + geom_qq(aes(sample = Resid$residuals), color= "navy blue") + ggtitle("Gene expression")
ggplot() + geom_qq(aes(sample = Resid$residuals), color= "navy blue") + ggtitle("Distribution of the Residuals")
ggplot() + geom_qq(aes(sample = Resid$residuals), color= "navy blue") + ggtitle("Distribution of the Residuals") + geom_qq_line(mapping = NULL, data = NULL)
ggplot() + geom_qq(aes(sample = Resid$residuals), color= "navy blue") + ggtitle("Distribution of the Residuals") + stat_qq_line()
sqrt(1/nrow(testing.all.genes) * sum(testing.all.genes$expression-prediction^2))
prediction <- predict(lrm.all.genes, newdata = testing.all.genes)
sqrt(1/nrow(testing.all.genes) * sum(testing.all.genes$expression-prediction^2))
sqrt(1/nrow(testing.all.genes) * sum((testing.all.genes$expression-prediction)^2))
hist.re <-ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(col="red")
qqplot.re <- ggplot() + geom_qq(aes(sample = Resid$residuals), color= "navy blue")
library(gridExtra)
grid.arrange(hist.re, qqplot.re, ncol=2, top= "Distribution of the Residuals")
install.packages("ggpubr")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y="counts") ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y="counts") ,col="red", adjust=4)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0.045*..count..) ,col="red", adjust=4)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0.045*..count..) ,col="red", adjust=10)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=..count..) ,col="red", adjust=10)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=..count..) ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=..count..) ,col="red", adjust=4)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0.5*..count..) ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_function(fun = dnorm, args = list(mean = mean(Resid$residuals), sd = sd(Resid$residuals)))
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(geom = "line", aes(colour = "red")) +
stat_function(fun = dnorm, aes(x = Resid$residuals, colour = "pink"))
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(geom = "line", aes(col = "red")) +
stat_function(fun = dnorm, aes(x = Resid$residuals, col = "pink"))
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0.55*..count..) ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0.6*..count..) ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0.6*"count") ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0.6*count) ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=..count..) ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0,57..count..) ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0,57*..count..) ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0,5*..count..) ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0.55*..count..) ,col="red")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0.55*..count..) ,col="red", Iwd=2)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0.55*..count..) ,col="red", size=2)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=0.55*..count..) ,col="red", size=1)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + geom_density(aes(y=..count..) ,adjust = 1, kernel = "gaussian") ,col="red", size=1)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(fill=..counts..), adjust = 1, kernel = "gaussian")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=..counts..), adjust = 1, kernel = "gaussian")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=..count..), adjust = 1, kernel = "gaussian")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=..count..), adjust = 1, kernel = "gaussian", col="red", aplha=.2)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=..count..), adjust = 1, kernel = "gaussian", col="red", alpha=.2)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=..count..), adjust = 1, kernel = "gaussian", col="red", alpha=.2, fill= FALSE)
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=..count..), adjust = 1, kernel = "gaussian", col="red", alpha=.2, fill= "FALSE")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=..count..), adjust = 1, kernel = "gaussian", col="red", alpha=.2, fill= "white")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=..count..), kernel = "gaussian", col="red", alpha=.2, fill= "white")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=..count..), adjust = 1, col="red", alpha=.2, fill= "white")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=..count..), col="red", alpha=.2, fill= "white")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=..density..), col="red", alpha=.2, fill= "white")
ggplot(data = Resid, aes(Resid$residuals)) + geom_histogram(bins = 30, col = "navy blue", fill="blue", alpha= .6) + labs( x="residuals", y="counts") + stat_density(aes(y=0,5*..density..), col="red", alpha=.2, fill= "white")
ggplot() + geom_qq(aes(sample = exp1$value), color= "navy blue") + ggtitle("gene expression") + geom_quantile()
plotqqb
list_all.genes <- list(expression,copynumber) # bind the two data frames in one list
names(list_all.genes) <- c("expression","copynumber") # rename the elements of the list
common_names = Reduce(intersect, lapply(list_all.genes, row.names)) # all common rownames in the three dataframes
list_all.genes <- lapply(list_all.genes, function(x) {x[row.names(x) %in% common_names,]}) # new list reduced to only the shared genes/ rownames
exp1b <- melt.data.frame(list_all.genes$expression, variable_name = "cell line") #fuse all expression values to one long column
cn1b <- melt.data.frame(list_all.genes$copynumber, variable_name = "cellline") # fuse all cell lines
plotexb <- ggplot() + geom_qq(aes(sample = exp1b$value), color= "navy blue") + ggtitle("Gene expression") # plot the quantils of the expression with the quantils of a gaussian distribution
plotcnb <- ggplot() + geom_qq(aes(sample = cn1b$value), color= "navy blue") + ggtitle("Copy number") # plot the quantils of the copynumber with the quantils of a gaussian distribution
grid.arrange(plotexb, plotcnb, ncol=2, top = "Checking normality")
